name: Python CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 coverage
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics > flake8_report.txt
      - name: Run tests with coverage
        run: |
          coverage run --source=. manage.py test
          coverage report -m > coverage_report.txt
          coverage html
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            flake8_report.txt
            coverage_report.txt
            htmlcov/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: the-button:${{ github.sha }}
          load: true
      - name: Debug image
        run: |
          echo "Listing built images:"
          docker images the-button:${{ github.sha }}
      - name: Run Trivy vulnerability scanner (blocking)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'the-button:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL'
          timeout: '5m'
      - name: Run Trivy vulnerability scanner (JSON report)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'the-button:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.json
      - name: Generate Trivy SARIF report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'the-button:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-to-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Show environment variables
        run: |
          echo "Deploying to ${{ vars.ENVIRONMENT_NAME }} environment"
          echo "Using token: ${{ secrets.DEPLOY_TOKEN != '' && '***' || 'Not set' }}"
      - name: Mock deployment
        run: |
          echo "Starting deployment to development environment..."
          sleep 5
          echo "Deployment to development environment completed!"

  deploy-to-production:
    needs: deploy-to-dev
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
      - name: Adding Known Hosts
        run: |
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      - name: Prepare deployment
        run: |
          chmod +x ./.github/scripts/deploy.sh
      - name: Deploy to EC2
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/the-button
          TAG: latest
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          ENV_NAME: production
        run: |
          echo "Starting deployment to EC2..."
          ./.github/scripts/deploy.sh $IMAGE_NAME $TAG $EC2_HOST $EC2_USER $ENV_NAME

