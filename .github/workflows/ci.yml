name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type (major, minor, patch)'
        required: false
        default: patch

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/the-button
          FULL_SHA=${{ github.sha }}
          docker build -t $IMAGE_NAME:$FULL_SHA .
          docker push $IMAGE_NAME:$FULL_SHA
          docker tag $IMAGE_NAME:$FULL_SHA $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

  deploy-to-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Show environment variables
        run: |
          echo "Deploying to ${{ vars.ENVIRONMENT_NAME }} environment"
          echo "Using token: ${{ secrets.DEPLOY_TOKEN != '' && '***' || 'Not set' }}"

      - name: Mock deployment
        run: |
          echo "Starting deployment to development environment..."
          sleep 5
          echo "Deployment to development environment completed!"

  release:
    runs-on: ubuntu-latest
    needs: deploy-to-dev
    outputs:
      tag: ${{ steps.versioning.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Semantic versioning
        id: versioning
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: master
          default_bump: ${{ github.event.inputs.version_type || 'patch' }}

      - name: Create Release
        if: steps.versioning.outputs.new_tag
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.versioning.outputs.new_tag }}
          release_name: Release ${{ steps.versioning.outputs.new_tag }}
          body: ${{ steps.versioning.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Login to DockerHub
        if: steps.versioning.outputs.new_tag
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and push Docker image with version
        if: steps.versioning.outputs.new_tag
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/the-button
          FULL_SHA=${{ github.sha }}
          TAG=${{ steps.versioning.outputs.new_tag }}
          docker tag $IMAGE_NAME:$FULL_SHA $IMAGE_NAME:$TAG
          docker push $IMAGE_NAME:$TAG
          docker tag $IMAGE_NAME:$FULL_SHA $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest
          echo "Docker image tagged as $TAG and pushed"

  deploy-to-production:
    needs: release
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Adding Known Hosts
        run: |
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Prepare deployment
        run: |
          chmod +x ./.github/scripts/deploy.sh

      - name: Deploy to EC2
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/the-button
          TAG: ${{ needs.release.outputs.tag }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          ENV_NAME: production
        run: |
          echo "Starting deployment of version $TAG to EC2..."
          ./.github/scripts/deploy.sh $IMAGE_NAME $TAG $EC2_HOST $EC2_USER $ENV_NAME
