name: CI/CD Workflow

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump (major, minor, patch)'
        required: false
        default: patch

jobs:
  release:
    runs-on: ubuntu-latest
    outputs: 
      tag: ${{ steps.versioning.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Semantic versioning
        id: versioning
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: master
          default_bump: ${{ github.event.inputs.version_type || 'patch' }}
          
      - name: Create Release
        if: steps.versioning.outputs.new_tag
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.versioning.outputs.new_tag }}
          release_name: Release ${{ steps.versioning.outputs.new_tag }}
          body: ${{ steps.versioning.outputs.changelog }}
          draft: false
          prerelease: false
          
      - name: Login to DockerHub
        if: steps.versioning.outputs.new_tag
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Tag and push Docker image with version
        if: steps.versioning.outputs.new_tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          docker pull ${{ secrets.DOCKER_USERNAME }}/the-button:${SHORT_SHA}
          docker tag ${{ secrets.DOCKER_USERNAME }}/the-button:${SHORT_SHA} ${{ secrets.DOCKER_USERNAME }}/the-button:${{ steps.versioning.outputs.new_tag }}
          docker push ${{ secrets.DOCKER_USERNAME }}/the-button:${{ steps.versioning.outputs.new_tag }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/the-button:${SHORT_SHA} ${{ secrets.DOCKER_USERNAME }}/the-button:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/the-button:latest
          echo "Docker image tagged and pushed: ${{ steps.versioning.outputs.new_tag }}"

  deploy-to-production:
    needs: release
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Adding Known Hosts
        run: |
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Prepare deployment
        run: |
          chmod +x ./.github/scripts/deploy.sh

      - name: Deploy to EC2
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/the-button
          TAG: ${{ needs.release.outputs.tag }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          ENV_NAME: production
        run: |
          echo "Starting deployment of version $TAG to EC2..."
          ./.github/scripts/deploy.sh $IMAGE_NAME $TAG $EC2_HOST $EC2_USER $ENV_NAME

  smoke-tests:
    needs: deploy-to-production
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare test script
        run: |
          chmod +x ./.github/scripts/smoke-tests.sh

      - name: Run smoke tests
        env:
          APP_URL: http://${{ secrets.EC2_HOST }}:8000
        run: |
          echo "Running smoke tests..."
          ./.github/scripts/smoke-tests.sh $APP_URL

      - name: Send notification on success
        if: success()
        run: |
          echo "Deployment and tests completed successfully!"
          curl -X POST -H "Content-Type: application/json" \
            -d '{"status":"success","message":"Deployment and tests completed successfully!"}' \
            ${{ secrets.WEBHOOK_URL }}

      - name: Send alert on failure
        if: failure()
        run: |
          echo "Smoke tests failed! Check the logs."
          curl -X POST -H "Content-Type: application/json" \
            -d '{"status":"failure","message":"Smoke tests failed! Check the logs."}' \
            ${{ secrets.WEBHOOK_URL }}
