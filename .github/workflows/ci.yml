name: CI/CD Workflow

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump (major, minor, patch)'
        required: false
        default: 'patch'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/the-button:${{ github.sha }} .

      - name: Push Docker image
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/the-button:${{ github.sha }}

  release:
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs: 
      tag: ${{ steps.versioning.outputs.new_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Semantic versioning
        id: versioning
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: master
          default_bump: ${{ github.event.inputs.version_type || 'patch' }}
          
      - name: Create Release
        if: steps.versioning.outputs.new_tag
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.versioning.outputs.new_tag }}
          release_name: Release ${{ steps.versioning.outputs.new_tag }}
          body: ${{ steps.versioning.outputs.changelog }}
          draft: false
          prerelease: false
          
      - name: Login to DockerHub
        if: steps.versioning.outputs.new_tag
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Tag and push Docker image with version
        if: steps.versioning.outputs.new_tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          docker pull ${{ secrets.DOCKER_USERNAME }}/the-button:${SHORT_SHA}
          docker tag ${{ secrets.DOCKER_USERNAME }}/the-button:${SHORT_SHA} ${{ secrets.DOCKER_USERNAME }}/the-button:${{ steps.versioning.outputs.new_tag }}
          docker push ${{ secrets.DOCKER_USERNAME }}/the-button:${{ steps.versioning.outputs.new_tag }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/the-button:${SHORT_SHA} ${{ secrets.DOCKER_USERNAME }}/the-button:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/the-button:latest
          echo "Obraz Docker został otagowany wersją ${{ steps.versioning.outputs.new_tag }} i wypchnięty do Docker Hub"

  deploy-to-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Show environment variables
        run: |
          echo "Deploying ${{ vars.ENVIRONMENT_NAME }} environment"
          echo "Using token: ${{ secrets.DEPLOY_TOKEN != '' && '***' || 'Not set' }}"
      - name: Mock deployment
        run: |
          echo "Starting deployment to development environment..."
          sleep 5
          echo "Deployment to development environment completed!"

  deploy-to-production:
    needs: release
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
      - name: Adding Known Hosts
        run: |
          ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
      - name: Prepare deployment
        run: |
          chmod +x ./.github/scripts/deploy.sh
        
      - name: Deploy to EC2
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/the-button
          TAG: ${{ needs.release.outputs.tag }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          ENV_NAME: production
        run: |
          echo "Starting deployment of version $TAG to EC2..."
          ./.github/scripts/deploy.sh $IMAGE_NAME $TAG $EC2_HOST $EC2_USER $ENV_NAME
